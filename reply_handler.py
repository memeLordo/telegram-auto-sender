import asyncio

from telethon import TelegramClient, events, functions
from telethon.types import User

import config


def say_hi(name):
    if name is None:
        message = '–ü—Ä–∏–≤–µ—Ç, —Ä–∞–¥, —á—Ç–æ –≤—ã –æ—Ç–∫–ª–∏–∫–Ω—É–ª–∏—Å—å –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é üî•\n'
    else:
        message = f'–ü—Ä–∏–≤–µ—Ç {name}, —Ä–∞–¥, —á—Ç–æ –≤—ã –æ—Ç–∫–ª–∏–∫–Ω—É–ª–∏—Å—å –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é üî•\n'
    message = (
        message
        + '–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ –≤–∞—à–µ–º –æ–ø—ã—Ç–µ —Ä–∞–±–æ—Ç—ã, —á—Ç–æ–±—ã —è —Å–º–æ–≥ —É–∑–Ω–∞—Ç—å –æ –≤–∞—Å –ø–æ–±–æ–ª—å—à–µ)'
    )
    return message


reply_massage = (
    '–ö—Å—Ç–∞—Ç–∏, –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–∫–∞ –∑–∞–ø–æ–ª–Ω–∏—Ç—å —Ñ–æ—Ä–º—É,'
    ' –∫–æ—Ç–æ—Ä–∞—è –ø–æ–π–¥—ë—Ç –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä—É –¥–ª—è –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω–∏—è.'
    '–í–æ—Ç —Å—Å—ã–ª–∫–∞ –Ω–∞ –Ω–µ—ë:\n'
    'https://docs.google.com/forms/d/e/'
    '1FAIpQLScQ4MXsn-Qrl38tRwgB6O5LPXrGt2Wasv8H5hCvA-N5H4w2Hw/viewform\n'
    '–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –æ—Ç–ø–∏—à–∏—Ç–µ—Å—å, –Ω–∞–ø—Ä–∏–º–µ—Ä "+", –∏ –º—ã –ø—Ä–æ–¥–æ–ª–∂–∏–º –¥–∏–∞–ª–æ–≥.'
)
client1 = TelegramClient('session_reply1', config.api_id, config.api_hash)
client2 = TelegramClient('session_reply2', config.api_id2, config.api_hash2)
client3 = TelegramClient('session_reply3', config.api_id2, config.api_hash2)

clients = [client1, client2, client3

           ]
my_client = TelegramClient('anon', config.my_api_id, config.my_api_hash)


@client1.on(events.NewMessage)
async def handle_new_message(event):
    try:
        if '—Ä–∞–±–æ—Ç–∞' == event.raw_text.lower():
            # print(event)
            bebra = await event.get_sender()
            await client1.loop.create_task(sent_reply(client1, bebra))
    except Exception as e:
        print(repr(e))
        # bebra = await my_client.get_entity(event.original_update.user_id)
        # print(bebra.first_name)

# replied = await event.get_reply_message()
# sender = replied.sender
# print(sender.username)
# # await event.answer(f'Hi, {sender.username}')
# await event.reply(f'hi, {sender}!')


async def check_new_messages():

    await client1.start()
    # request = await clients[0](functions.messages.GetDialogFiltersRequest())
    dialogs = client1.iter_dialogs()

    # ch = await client.get_entity(1515430527)
    # title = client(functions.channels.GetFullChannelRequest(channel=ch))
    # print(ch.title)

    # channels = await client.get_dialogs(folder=2)
    # for channel in channels:
    #     print(channel)
    #     print('\n\n')

    async for dialog in dialogs:
        # print(dialog.entity)
        try:
            if not isinstance(dialog.entity, User):
                continue
            if '—Ä–∞–±–æ—Ç–∞' == str(dialog.message.message).lower():
                bebra = dialog.entity
                await client1.loop.create_task(
                    sent_reply(client1, bebra)
                )

                # print(dialog.name)
        except Exception as e:
            print(repr(e))


async def sent_reply(client, bebra):

    print(bebra.first_name.split(' ')[0])
    await client.send_read_acknowledge(bebra.id)
    async with client.action(bebra, 'typing'):
        await asyncio.sleep(3)

        match bebra.first_name:
            case None:
                print('–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ is None')
                await client.send_message(bebra, say_hi(bebra.first_name))
            case _:
                await client.send_message(bebra, say_hi(bebra.first_name))
                print(f'–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç: {bebra.first_name}')
        async with client.action(bebra, 'typing'):
            await asyncio.sleep(3)
            await client.send_message(bebra, reply_massage)
        print('reply message sent')


if __name__ == '__main__':
    # for client in clients[0]:
    # client1.start()
    try:
        client1.loop.run_until_complete(check_new_messages())
    except Exception as e:
        print(repr(e))
    client1.run_until_disconnected()
    # client.start()

    # with clients[0] as client:
    #     client.loop.run_until_complete(main())
    # with clients[0] as client:
    #     client.loop.run_until_complete(main())
