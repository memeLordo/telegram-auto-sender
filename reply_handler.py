import asyncio

from telethon import TelegramClient, events
from telethon.types import User

import config


def say_hi(name):
    if name is None:
        message = '–ü—Ä–∏–≤–µ—Ç, —Ä–∞–¥, —á—Ç–æ –≤—ã –æ—Ç–∫–ª–∏–∫–Ω—É–ª–∏—Å—å –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é üî•\n'
    else:
        message = f'–ü—Ä–∏–≤–µ—Ç {name}, —Ä–∞–¥, —á—Ç–æ –≤—ã –æ—Ç–∫–ª–∏–∫–Ω—É–ª–∏—Å—å –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é üî•\n'
    message = (
        message
        + '–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ –≤–∞—à–µ–º –æ–ø—ã—Ç–µ —Ä–∞–±–æ—Ç—ã,' +
        ' —á—Ç–æ–±—ã —è —Å–º–æ–≥ —É–∑–Ω–∞—Ç—å –æ –≤–∞—Å –ø–æ–±–æ–ª—å—à–µ)'
    )
    return message


reply_massage = (
    '–ö—Å—Ç–∞—Ç–∏, –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–∫–∞ –∑–∞–ø–æ–ª–Ω–∏—Ç—å —Ñ–æ—Ä–º—É,'
    ' –∫–æ—Ç–æ—Ä–∞—è –ø–æ–π–¥—ë—Ç –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä—É –¥–ª—è –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω–∏—è.'
    '–í–æ—Ç —Å—Å—ã–ª–∫–∞ –Ω–∞ –Ω–µ—ë:\n'
    'https://docs.google.com/forms/d/e/'
    '1FAIpQLScQ4MXsn-Qrl38tRwgB6O5LPXrGt2Wasv8H5hCvA-N5H4w2Hw/viewform\n'
    '–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –æ—Ç–ø–∏—à–∏—Ç–µ—Å—å, –Ω–∞–ø—Ä–∏–º–µ—Ä "+", –∏ –º—ã –ø—Ä–æ–¥–æ–ª–∂–∏–º –¥–∏–∞–ª–æ–≥.'
)

reply_to_form = (
    '–û—Ç–ª–∏—á–Ω–æ. –¢–µ–ø–µ—Ä—å –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ '
    '–¥–∏—Ä–µ–∫—Ç–æ—Ä—É. –ï—Å–ª–∏ –≤—ã –Ω–∞–º –ø–æ–¥–æ–π–¥—ë—Ç–µ, —Ç–æ —è —Å–≤—è–∂—É—Å—å —Å –≤–∞–º–∏. '
    '–ò –µ—Å–ª–∏ —É –≤–∞—Å –æ—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã, —Ç–æ —Å–º–µ–ª–æ –∑–∞–¥–∞–≤–∞–π—Ç–µ –∏—Ö!'
)


client1 = TelegramClient('session1', config.api_id, config.api_hash)
client2 = TelegramClient('session2', config.api_id2, config.api_hash2)
client3 = TelegramClient('session3', config.api_id2, config.api_hash2)
my_client = TelegramClient('anon', config.my_api_id, config.my_api_hash)

clients = [client1, client2, client3]

####################################################


def add_count(client):
    if client == client1:
        pass
    if client == client2:
        pass
    if client == client3:
        pass
####################################################


async def sent_reply_start(client, bebra):

    first_name = bebra.first_name.split(' ')[0]
    print(first_name)
    await client.send_read_acknowledge(bebra.id)
    async with client.action(bebra, 'typing'):
        await asyncio.sleep(4)
        await client.send_message(bebra, say_hi(bebra.first_name))
        print(f'–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç: {bebra.first_name}')

    async with client.action(bebra, 'typing'):
        await asyncio.sleep(5)
        await client.send_message(bebra, reply_massage)
        print('reply message sent')


async def sent_reply_to_form(client, bebra):
    await client.send_read_acknowledge(bebra.id)
    async with client.action(bebra, 'typing'):
        await asyncio.sleep(5)
        await client.send_message(bebra, reply_to_form)
        print('form message sent')


####################################################


async def match_sent_message(client, user, message):
    if not isinstance(user, User):
        return
    match message:
        case '—Ä–∞–±–æ—Ç–∞' | '–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç':
            await client.loop.create_task(
                sent_reply_start(client, user)
            )
        case '+':
            await client.loop.create_task(
                sent_reply_to_form(client, user)
            )


####################################################


@client1.on(events.NewMessage)
async def handle_new_message1(event):
    try:
        bebra = await event.get_input_sender()
        await match_sent_message(client1,
                                 bebra,
                                 event.raw_text.lower())
    except Exception as e:
        print(repr(e))


@client2.on(events.NewMessage)
async def handle_new_message2(event):
    try:
        bebra = await event.get_input_sender()
        print('lol ' + bebra.first_name)
        await match_sent_message(client2,
                                 bebra,
                                 event.raw_text.lower())
    except Exception as e:
        print(repr(e))


@client3.on(events.NewMessage)
async def handle_new_message3(event):
    try:
        # print(repr(client3.get_me()))
        bebra = await event.get_input_sender()
        await match_sent_message(client3,
                                 bebra,
                                 event.raw_text.lower())

    except Exception as e:
        print(repr(e))


####################################################


async def check_new_messages():

    try:
        await client.start()
        dialogs = client.iter_dialogs()
    except Exception as e:
        print(repr(e))

    async for dialog in dialogs:
        try:
            # if not isinstance(dialog.entity, User):
            #     continue
            bebra = dialog.entity
            await match_sent_message(client,
                                     bebra,
                                     str(dialog.message.message).lower())

            # print(dialog.name)
        except Exception as e:
            print(repr(e))


####################################################


def start_event_handler():
    try:
        loop = asyncio.get_event_loop()
        client1.start()
        client2.start()
        client3.start()
        loop.run_forever()
    except Exception as e:
        print(repr(e))


####################################################


if __name__ == '__main__':

    for current_client in clients:

        with current_client as client:
            client.session.save_entities = False
            client.loop.run_until_complete(check_new_messages())

    print('done')
    start_event_handler()
