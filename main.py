# import json
import asyncio

from telethon import errors, functions
from telethon.sync import TelegramClient
from telethon.tl.types import InputPeerChannel

import config

# Use your own values from my.telegram.org

clients = [
    TelegramClient('session1', config.api_id, config.api_hash),
    TelegramClient('session2', config.api_id2, config.api_hash2),
    TelegramClient('session3', config.api_id2, config.api_hash2),
]

SEARCHED_DIRS = ['–ù–æ–≤—ã–µ FA', 'Free assist']
ad_1 = str(
    '#–í–∞–∫–∞–Ω—Å–∏—è #–∏—â—É–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞\n'
    '\n'
    'üîç –ò—â—É –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞: —É–¥–∞–ª–µ–Ω–Ω–æ\n'
    '–≠—Ç–æ –æ—Ç–ª–∏—á–Ω–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω–Ω—ã–π –æ–ø—ã—Ç –≤ —Å—Ñ–µ—Ä–µ –ø–æ—Å—Ç–∞–≤–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤,\n'
    '—Ä–∞–∑–≤–∏—Ç–∏—è –Ω–æ–≤—ã—Ö –±–∏–∑–Ω–µ—Å - –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –≤ –∫–æ–º–ø–∞–Ω–∏–∏ —Å 7 - –∏–º —Å—Ç–∞–∂–µ–ºüí•'
    '\n'
    '–ó–∞–¥–∞—á–∏, –∫–æ—Ç–æ—Ä—ã–µ —Ç–µ–±—è –∂–¥—É—Ç:\n'
    '    - –í–µ–¥–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–æ–±–æ—Ä–æ—Ç–∞\n'
    '    - –ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ\n'
    '    - –†–∞–±–æ—Ç–∞ –≤ excel —Ç–∞–±–ª–∏—Ü–∞—Ö\n'
    '    - –õ–∏—á–Ω—ã–µ –ø–æ—Ä—É—á–µ–Ω–∏—è\n'
    '\n'
    '–£—Å–ª–æ–≤–∏—è:\n'
    '-  –ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã: 4 —á–∞—Å–∞ –≤ –¥–µ–Ω—å\n'
    '-  –í—ã—Ö–æ–¥–Ω—ã–µ —Å–± –∏ –≤—Å\n'
    '-  –ü–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–µ–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞\n'
    '-  –ù–µ–¥–µ–ª—å–Ω–∞—è —Å—Ç–∞–∂–∏—Ä–æ–≤–∫–∞\n'
    '-  –ó–ü 20000 —Ä\n'
    '-  –ï—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∫–∞—Ä—å–µ—Ä–Ω–æ–≥–æ —Ä–æ—Å—Ç–∞ –¥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø–æ –ø—Ä–æ–µ–∫—Ç–∞–º\n'
    '\n'
    '–ï—Å–ª–∏ —Ç—ã –∏–º–µ–µ—à—å:\n'
    '‚úîÔ∏è –û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã —Å –æ—Ñ–∏—Å–Ω—ã–º–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è–º–∏(Word, Excel).\n'
    '‚úîÔ∏è –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ –ø–æ–¥—Ö–æ–¥–∏—à—å –∫ —Ä–∞–±–æ—Ç–µ\n'
    '‚úîÔ∏è –ë—ã—Å—Ç—Ä–æ –æ–±—É—á–∞–µ—à—å—Å—è –Ω–æ–≤–æ–º—É\n'
    '\n'
    'üëâ –¢–æ  –ø–∏—à–∏ "–†–ê–ë–û–¢–ê" @behetly',
)
ad_2 = str(
    'üîç –ò—â—É –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞: —É–¥–∞–ª–µ–Ω–Ω–æ\n'
    '–≠—Ç–æ –æ—Ç–ª–∏—á–Ω–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω–Ω—ã–π –æ–ø—ã—Ç –≤ —Å—Ñ–µ—Ä–µ –ø–æ—Å—Ç–∞–≤–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤\n'
    '—Ä–∞–∑–≤–∏—Ç–∏—è –Ω–æ–≤—ã—Ö –±–∏–∑–Ω–µ—Å - –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –≤ –∫–æ–º–ø–∞–Ω–∏–∏ —Å 7 - –∏–º —Å—Ç–∞–∂–µ–ºüí•\n'
    '\n'
    ' –ó–∞–¥–∞—á–∏, –∫–æ—Ç–æ—Ä—ã–µ —Ç–µ–±—è –∂–¥—É—Ç:\n'
    ' - –í–µ–¥–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–æ–±–æ—Ä–æ—Ç–∞\n'
    ' - –ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ\n'
    '-  –†–∞–±–æ—Ç–∞ –≤ excel —Ç–∞–±–ª–∏—Ü–∞—Ö\n'
    ' - –õ–∏—á–Ω—ã–µ –ø–æ—Ä—É—á–µ–Ω–∏—è\n'
    '\n'
    '–£—Å–ª–æ–≤–∏—è:\n'
    '-  –ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã: 4 —á–∞—Å–∞ –≤ –¥–µ–Ω—å\n'
    '-  –í—ã—Ö–æ–¥–Ω—ã–µ —Å–± –∏ –≤—Å\n'
    '-  –ü–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–µ–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞\n'
    '-  –ù–µ–¥–µ–ª—å–Ω–∞—è —Å—Ç–∞–∂–∏—Ä–æ–≤–∫–∞\n'
    '-  –ó–ü 20000 —Ä\n'
    '-  –ï—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∫–∞—Ä—å–µ—Ä–Ω–æ–≥–æ —Ä–æ—Å—Ç–∞ –¥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø–æ –ø—Ä–æ–µ–∫—Ç–∞–º\n'
    '\n'
    '–ï—Å–ª–∏ —Ç—ã –∏–º–µ–µ—à—å:\n'
    '‚úîÔ∏è –û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã —Å –æ—Ñ–∏—Å–Ω—ã–º–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è–º–∏ (Word, Excel).\n'
    '‚úîÔ∏è –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ –ø–æ–¥—Ö–æ–¥–∏—à—å –∫ —Ä–∞–±–æ—Ç–µ\n'
    '‚úîÔ∏è –ë—ã—Å—Ç—Ä–æ –æ–±—É—á–∞–µ—à—å—Å—è –Ω–æ–≤–æ–º—É\n'
    '\n'
    'üëâ –¢–æ  –ø–∏—à–∏ "–†–ê–ë–û–¢–ê" –õ–°'
)


async def main():
    request = await client(functions.messages.GetDialogFiltersRequest())
    await send_to_channels(request)

    # async for dialog in client.iter_dialogs():
    #     print(dialog.id)
    #     print(client.get_entity(GetFullChannel(dialog.id)))
    # if dialog.id in ad_channels_1:
    #     print('success')
    # if dialog.name == 'Golubin | Assistant':
    #     print(dialog.id)
    # await send_to_channels(SEARCHED_DIRS)


async def send_to_channels(request, dirs=SEARCHED_DIRS):
    for dialog_filter in request:
        result = dialog_filter.to_dict()
        try:
            title = result['title']

            if title in dirs:
                print(result['title'])

                match title:
                    case 'Free assist':
                        await send_message_to_channel(result, ad_1)
                        await asyncio.sleep(3)
                        print('Succsess')

                    case '–ù–æ–≤—ã–µ FA':
                        await send_message_to_channel(result, ad_2)
                        await asyncio.sleep(3)
                        print('–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ 2.')

        except KeyError:
            pass


#
#     for dialog_filter in request:
#         result = dialog_filter.to_dict()
#         try:
#             title = result['title']
#
#             if title in dirs:
#                 print(result['title'])
#
#                 match title:
#                     case 'Free assist':
#                         await send_message_to_channel(result, ad_1)
#                         print('–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ 1.')
#
#                     case '–ù–æ–≤—ã–µ FA':
#                         await send_message_to_channel(result, ad_2)
#                         print('–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ 2.')
#
#         except KeyError:
#             pass
# print(json.dumps(result))


async def send_message_to_channel(result, message):
    for channel in result['pinned_peers'] + result['include_peers']:
        try:

            channel_id = int(channel['channel_id'])
            # if channel_id in Skip_List:
            #     raise Exception(f'id {channel_id} skipeed')

            access_hash = int(channel['access_hash'])

            get_channel = InputPeerChannel(
                channel_id=channel_id, access_hash=access_hash
            )
            async with client.action(channel_id=channel_id, 'typing'):
                await client.send_message(get_channel, message=message)
            await asyncio.sleep(1)
            print(f'sent to {get_channel}')

        except KeyError:
            pass
        except errors.rpcbaseerrors.ForbiddenError as e:
            print(e)
        except errors.rpcerrorlist.UserBannedInChannelError as e:
            print(e)
        except errors.rpcerrorlist.ChannelPrivateError as e:
            print(e)
        except errors.rpcerrorlist.SlowModeWaitError:
            continue
        except Exception as e:
            print(e)

    # for channel in :
    #     try: w
    #         asyncio.sleep(1)
    #         channel_id = int(channel['channel_id'])
    #         # await client.send_message(channel_id, message=message)
    #         print(f'sent to {channel_id}')
    #     except KeyError:
    #         pass
    #     except errors.rpcbaseerrors.ForbiddenError as e:
    #         print(e)
    #     except errors.rpcerrorlist.UserBannedInChannelError as e:
    #         print(e)


for current_client in clients:
    with current_client as client:
        client.session.save_entities = False
        client.loop.run_until_complete(main())
        await asyncio.sleep(10 * 60)
